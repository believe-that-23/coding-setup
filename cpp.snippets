snippet snips "all snippets"
/*
   snips
   akp
   basic
   while
   for
   sort
   ncr
   dsu
   mobius
   dijkstra
   lca
   articulation
   scc
   gcd
   binpow
   inv
   fft
   sufarr
   aho
   cht
   hld
   segtree
   convex_hull
   centroid
   sparse
   decart
   fenwick
   fenwick2d
   deb
 */
endsnippet

snippet akp "akp"
#include <bits/stdc++.h>
#include<ext/pb_ds/assoc_container.hpp>
#include<ext/pb_ds/tree_policy.hpp>
#define endl "\n"
#define fi first
#define se second
#define pb push_back
#define ppb pop_back()
#define pf push_front
#define ppf pop_front()
#define eb emplace_back
#define mp make_pair
#define ll long long
#define lld long double
#define all(x) (x).begin(),(x).end()
#define vll vector<long long int>
using namespace std;
using namespace __gnu_pbds;
#define ordered_set tree<int, null_type,less<int>, rb_tree_tag,tree_order_statistics_node_update>

//-----------------------------------------------------------


void solve()
{
	$0
}
int main() {
	ios_base::sync_with_stdio(0);
	cin.tie(0); cout.tie(0);
//	if (fopen("input.txt", "r"))
//	{
//		freopen("input.txt", "r", stdin);
//		freopen("output.txt", "w", stdout);
//	}
	int t=1;
	cin>>t;
    for(int i=1;i<=t;i++){
//        cout<<"Case #"<<i<<": ";
        solve();
    }
	return 0;
}








endsnippet

snippet dsu
template<ll SZ> struct DSU {
	ll parent[SZ], size[SZ];

	DSU() {
		for(ll i=0;i<SZ;i++) parent[i] = i, size[i] = 1;
	}

	ll get(ll x) {
		if (parent[x] != x) parent[x] = get(parent[x]);
		return parent[x];
	}

	void unify(ll x, ll y) {
		x = get(x); y = get(y);
		if (x == y) return;
		if (size[x] < size[y]) swap(x, y);
		size[x]+=size[y];
		parent[y] = x;

	}
};
$0
endsnippet
snippet while
while($1){
	$0
}
endsnippet

snippet mod

const ll M = 1e9 + 7;
const ll N = 1e5 + 5;
const ll inf = 2e18;
ll mod(ll x){   return (x%M);}
ll mod_minus(ll a, ll b){ ll ans= (mod(a)-mod(b)); if(ans<0) ans=mod(ans+M); return ans;}
ll mod_mul(ll a,ll b){  return mod(mod(a)*mod(b));}
ll mod_add(ll a,ll b){ return mod(mod(a)+mod(b));}
ll power(ll a,ll n){  if(n==0) return 1;  else if(n==1) return a;  ll R=power(a,n/2)%M;  if(n%2==0) {  return mod(mod_mul(R,R)); }   else { return mod(mod_mul(mod_mul(R,a),mod(R)));  }}
ll mod_div(ll a,ll b){// only if M is prime
	ll ans=mod(a);
	ll b1=power(b,M-2);
	ans= mod(mod_mul(ans,b1));
	return ans;
}
ll mod_inv(ll n){  return power(n,M-2);}
ll fact_mod(ll n){
	vll fact(n+1);
	fact[0]=1;
	for(ll i=1;i<n+1;i++){
		fact[i]=mod_mul(fact[i-1],i);
	}
	return fact[n];
}
ll ncr(ll n,  ll r)
{
	if (r == 0 || n==0)
		return 1;
	ll fac[n + 1];
	fac[0] = 1;
	for (ll i = 1; i <= n; i++)
		fac[i] = (fac[i - 1] * i) % M;
	return (fac[n] * mod_inv(fac[r]) % M * mod_inv(fac[n - r]) % M) % M;
}
pair<ll,ll> Egcd(ll a,ll b)
{
	if(b==0)
		return make_pair(1,0);
	pair<ll,ll> t=Egcd(b,a%b);
	return make_pair(t.se,t.fi-(a/b)*t.se);
}
$0
endsnippet
snippet ncr
//rlog(n)
//prevents overflow
ll ncr(ll n, ll r)
{
	long long p = 1, k = 1;
	if (n - r < r)
		r = n - r;
	if (r != 0) {
		while (r) {
			p *= n;
			k *= r;
			long long m = __gcd(p, k);
			p /= m;
			k /= m;
			n--;
			r--;
		}
	}
	else
		p = 1;
	return p;
}
endsnippet

snippet dijkstra
vll d(100005,1e18);
void dijkstra(ll s){
	set<pair<ll,ll>> q;
	for(ll i=0;i<100005;i++)
		d[i]=1e18;
	d[s]=0;
	q.insert({0,s});
	while(!q.empty()){
		ll v=q.begin()->second;
		q.erase(q.begin());

		for(auto c:adj[v]){
			ll to=c.first;
			ll len=c.second;
			if(d[v]+len<d[to]){
				q.erase({d[to],to});
				d[to]=d[v]+len;
				q.insert({d[to],to});
			}
		}
	}
}
$0
endsnippet

snippet mobius
vector<ll> smallest_factor;
vector<ll8_t> smallest_power;
vector<ll8_t> mobius;
vector<bool> prime;
vector<ll> primes;

// Note: this sieve is O(n).
void sieve(ll maximum) {
	maximum = max(maximum, 1);
	smallest_factor.assign(maximum + 1, 0);
	smallest_power.assign(maximum + 1, 0);
	mobius.assign(maximum + 1, 0);
	prime.assign(maximum + 1, true);
	mobius[1] = 1;
	prime[0] = prime[1] = false;
	primes = {};

	for (ll i = 2; i <= maximum; i++) {
		if (prime[i]) {
			smallest_factor[i] = i;
			smallest_power[i] = 1;
			mobius[i] = -1;
			primes.push_back(i);
		}

		for (ll p : primes) {
			if (p > smallest_factor[i] || i * p > maximum)
				break;

			prime[i * p] = false;
			smallest_factor[i * p] = p;
			smallest_power[i * p] = smallest_factor[i] == p ? ll8_t(smallest_power[i] + 1) : 1;
			mobius[i * p] = smallest_factor[i] == p ? 0 : ll8_t(-mobius[i]);
		}
	}
}
endsnippet



snippet articulation
ll n; // number of nodes
vector<vector<ll>> adj; // adjacency list of graph

vector<bool> visited;
vector<ll> tin, low;// low will check for back edges
ll timer;

void dfs(ll v, ll p = -1) {
	visited[v] = true;
	tin[v] = low[v] = timer++;
	ll children=0;
	for (ll to : adj[v]) {
		if (to == p) continue;
		if (visited[to]) {
			low[v] = min(low[v], tin[to]);
		} else {
			dfs(to, v);
			low[v] = min(low[v], low[to]);
			if (low[to] >= tin[v] && p!=-1)
				IS_CUTPOll(v);// there is bridge b/w (v,to)
			++children;
		}
	}
	if(p == -1 && children > 1)
		IS_CUTPOll(v);
}

void find_cutpolls() {
	timer = 0;
	visited.assign(n, false);
	tin.assign(n, -1);
	low.assign(n, -1);
	for (ll i = 0; i < n; ++i) {
		if (!visited[i])
			dfs (i);
	}
}
endsnippet
snippet scc
vector<vector<ll>> adj, adj_rev;
vector<bool> used;
vector<ll> order, component;

void dfs1(ll v) {
    used[v] = true;

    for (auto u : adj[v])
        if (!used[u])
            dfs1(u);

    order.push_back(v);
}

void dfs2(ll v) {
    used[v] = true;
    component.push_back(v);

    for (auto u : adj_rev[v])
        if (!used[u])
            dfs2(u);
}

ll main() {
    ll n;
	cin>>n;

    for (ll i=0;i<edges;i++) {
        ll a, b;
        // ... read next directed edge (a,b) ...
        adj[a].push_back(b);
        adj_rev[b].push_back(a);
    }

    used.assign(n, false);

    for (ll i = 0; i < n; i++)
        if (!used[i])
            dfs1(i);

    used.assign(n, false);
    reverse(order.begin(), order.end());

    for (auto v : order)
        if (!used[v]) {
            dfs2 (v);

			ll root = component.front();
			for (auto u : component) roots[u] = root;
			root_nodes.push_back(root);

            // ... processing next component ...

            component.clear();
        }

	vector<ll> roots(n, 0);
	vector<ll> root_nodes;
	vector<vector<ll>> adj_scc(n);
	// adj_scc contains graph to which we can apply dp
	
	for (ll v = 0; v < n; v++)
	    for (auto u : adj[v]) {
	        ll root_v = roots[v],
	            root_u = roots[u];
	
	        if (root_u != root_v)
	            adj_scc[root_v].push_back(root_u);
	    }
}

endsnippet

snippet lca
ll n, l;
vector<vector<ll>> adj;

ll timer;
vector<ll> tin, tout;
vector<vector<ll>> up;

void dfs(ll v, ll p)
{
	tin[v] = ++timer;
	up[v][0] = p;
	for (ll i = 1; i <= l; ++i)
		up[v][i] = up[up[v][i-1]][i-1];

	for (ll u : adj[v]) {
		if (u != p)
			dfs(u, v);
	}

	tout[v] = ++timer;
}

bool is_ancestor(ll u, ll v)
{
	return tin[u] <= tin[v] && tout[u] >= tout[v];
}

ll lca(ll u, ll v)
{
	if (is_ancestor(u, v))
		return u;
	if (is_ancestor(v, u))
		return v;
	for (ll i = l; i >= 0; --i) {
		if (!is_ancestor(up[u][i], v))
			u = up[u][i];
	}
	return up[u][0];
}

void preprocess(ll root) {
	tin.resize(n);
	tout.resize(n);
	timer = 0;
	l = ceil(log2(n));
	up.assign(n, vector<ll>(l + 1));
	dfs(root, root);
}
$0
endsnippet

snippet ife
if($1){
	$2
}
else{
	$3
}
$0
endsnippet

snippet basic "minimalist begin"
#include <bits/stdc++.h>

using namespace std;
typedef long long ll;

void solve(){
	$0
}

int main() {
	ios_base::sync_with_stdio(0);
	cin.tie(0);
	int t;
	cin>>t;
	while(t--){
		solve();
	}
	return 0;
}
endsnippet

snippet for "for"
for (int ${1:i} = 0; $1 < ${2:n}; $1++) {
	$0
}
endsnippet

snippet uni 
$1.erase(unique(all($1)),$1.end());
$0
endsnippet


snippet sort 
sort(all($1));$0
endsnippet

snippet sortr
sort(all($1),greater<ll>());$0
endsnippet

snippet rev
reverse(all($1));$0
endsnippet

snippet pq
priority_queue<$1> $0
endsnippet

snippet pqi
priority_queue<$1,vector<$1>,greater<$1>> $0
endsnippet

snippet lb
lower_bound(all($1),$2);$0
endsnippet

snippet ub
upper_bound(all($1),$2);$0
endsnippet

snippet gcd "gcd"
template<typename T>
T gcd(T a, T b) {
	while (a) {
		b %= a;
		swap(a, b);
	}
	return b;
}
ll gcd_extend(ll a,ll b,ll& x,ll& y)
{
	if (b == 0) {
		x = 1;
		y = 0;
		return a;
	}
	else {
		ll g = gcd_extend(b,a % b, x, y);
		ll x1 = x, y1 = y;
		x = y1;
		y = x1 - (a / b) * y1;
		return g;
	}
}
 
//sol for x and y ax + by = c
vll prll_solution(ll a, ll b, ll c)
{
	ll x, y;
	vll ans;

	ll gc = gcd_extend(a, b, x, y);
	ll g=__gcd(a,b);
	ll x1=x * (c / gc);
	ll x2=y * (c / gc);

	while(x2==0 || x1==0){
		x2=x2-a/g;
		x1=x1+b/g;
	}

	ans.pb(x1);
	ans.pb(x2);

	return ans;
}
endsnippet

snippet binpow "binpow"
ll binpow(ll a, ll b) {
	ll ans = 1;
	while (b) {
		if (b & 1) {
			ans = 1LL * ans * a % MOD;
		}
		a = 1LL * a * a % MOD;
		b >>= 1;
	}
	return ans;
}
endsnippet

snippet inv "any mod inverse"
ll inv(ll a, ll m) {
	if (a == 1) {
		return 1;
	}
	return (1LL - inv(m % a, a) * m) / a + m;
}
endsnippet

snippet fft "FFT"
namespace fft {
	struct cmpl {
		double x, y;
		cmpl() {
			x = y = 0;
		}
		cmpl(double x, double y) : x(x), y(y) {}
		inline cmpl conjugated() const {
			return cmpl(x, -y);
		}
	};
	inline cmpl operator+(cmpl a, cmpl b) {
		return cmpl(a.x + b.x, a.y + b.y);
	}
	inline cmpl operator-(cmpl a, cmpl b) {
		return cmpl(a.x - b.x, a.y - b.y);
	}
	inline cmpl operator*(cmpl a, cmpl b) {
		return cmpl(a.x * b.x - a.y * b.y, a.x * b.y + a.y * b.x);
	}

	ll base = 1; // current power of two (2^base >= n)
	vector<cmpl> roots = {{0, 0}, {1, 0}}; // complex roots of 1 (with bases from 1 to base), 1-based indexing
	vector<ll> rev = {0, 1}; // rev[i] = reversed bit representation of i
	const double PI = static_cast<double>(acosl(-1.0));

	void ensure_base(ll nbase) { // if base < nbase increase it
		if (nbase <= base) {
			return;
		}
		rev.resize(1 << nbase);
		for (ll i = 1; i < (1 << nbase); i++) {
			rev[i] = (rev[i >> 1] >> 1) + ((i & 1) << (nbase - 1));
		}
		roots.resize(1 << nbase);
		while (base < nbase) {
			double angle = 2 * PI / (1 << (base + 1));
			for (ll i = 1 << (base - 1); i < (1 << base); i++) {
				roots[i << 1] = roots[i];
				double angle_i = angle * (2 * i + 1 - (1 << base));
				roots[(i << 1) + 1] = cmpl(cos(angle_i), sin(angle_i));
			}
			base++;
		}
	}

	void fft(vector<cmpl>& a, ll n = -1) {
		if (n == -1) {
			n = (ll) a.size();
		}
		assert((n & (n - 1)) == 0); // ensure that n is a power of two
		ll zeros = __builtin_ctz(n);
		ensure_base(zeros);
		ll shift = base - zeros;
		for (ll i = 0; i < n; i++) {
			if (i < (rev[i] >> shift)) {
				swap(a[i], a[rev[i] >> shift]);
			}
		}
		for (ll k = 1; k < n; k <<= 1) {
			for (ll i = 0; i < n; i += 2 * k) {
				for (ll j = 0; j < k; j++) {
					cmpl z = a[i + j + k] * roots[j + k];
					a[i + j + k] = a[i + j] - z;
					a[i + j] = a[i + j] + z;
				}
			}
		}
	}

	vector<cmpl> fa, fb;

	vector<long long> square(const vector<ll>& a) {
		if (a.empty()) {
			return {};
		}
		ll need = (ll) a.size() + (ll) a.size() - 1;
		ll nbase = 1;
		while ((1 << nbase) < need) {
			nbase++;
		}
		ensure_base(nbase);
		ll sz = 1 << nbase;
		if ((sz >> 1) > (ll) fa.size()) {
			fa.resize(sz >> 1);
		}
		for (ll i = 0; i < (sz >> 1); i++) {
			ll x = (2 * i < (ll) a.size() ? a[2 * i] : 0);
			ll y = (2 * i + 1 < (ll) a.size() ? a[2 * i + 1] : 0);
			fa[i] = cmpl(x, y);
		}
		fft(fa, sz >> 1);
		cmpl r(1.0 / (sz >> 1), 0.0);
		for (ll i = 0; i <= (sz >> 2); i++) {
			ll j = ((sz >> 1) - i) & ((sz >> 1) - 1);
			cmpl fe = (fa[i] + fa[j].conjugated()) * cmpl(0.5, 0);
			cmpl fo = (fa[i] - fa[j].conjugated()) * cmpl(0, -0.5);
			cmpl aux = fe * fe + fo * fo * roots[(sz >> 1) + i] * roots[(sz >> 1) + i];
			cmpl tmp = fe * fo;
			fa[i] = r * (aux.conjugated() + cmpl(0, 2) * tmp.conjugated());
			fa[j] = r * (aux + cmpl(0, 2) * tmp);
		}
		fft(fa, sz >> 1);
		vector<long long> res(need);
		for (ll i = 0; i < need; i++) {
			res[i] = llround(i % 2 == 0 ? fa[i >> 1].x : fa[i >> 1].y);
		}
		return res;
	}

	// llerface

	vector<long long> multiply(const vector<ll>& a, const vector<ll>& b) {
		if (a.empty() || b.empty()) {
			return {};
		}
		if (a == b) {
			return square(a);
		}
		ll need = (ll) a.size() + (ll) b.size() - 1;
		ll nbase = 1;
		while ((1 << nbase) < need) nbase++;
		ensure_base(nbase);
		ll sz = 1 << nbase;
		if (sz > (ll) fa.size()) {
			fa.resize(sz);
		}
		for (ll i = 0; i < sz; i++) {
			ll x = (i < (ll) a.size() ? a[i] : 0);
			ll y = (i < (ll) b.size() ? b[i] : 0);
			fa[i] = cmpl(x, y);
		}
		fft(fa, sz);
		cmpl r(0, -0.25 / (sz >> 1));
		for (ll i = 0; i <= (sz >> 1); i++) {
			ll j = (sz - i) & (sz - 1);
			cmpl z = (fa[j] * fa[j] - (fa[i] * fa[i]).conjugated()) * r;
			fa[j] = (fa[i] * fa[i] - (fa[j] * fa[j]).conjugated()) * r;
			fa[i] = z;
		}
		for (ll i = 0; i < (sz >> 1); i++) {
			cmpl A0 = (fa[i] + fa[i + (sz >> 1)]) * cmpl(0.5, 0);
			cmpl A1 = (fa[i] - fa[i + (sz >> 1)]) * cmpl(0.5, 0) * roots[(sz >> 1) + i];
			fa[i] = A0 + A1 * cmpl(0, 1);
		}
		fft(fa, sz >> 1);
		vector<long long> res(need);
		for (ll i = 0; i < need; i++) {
			res[i] = llround(i % 2 == 0 ? fa[i >> 1].x : fa[i >> 1].y);
		}
		return res;
	}

	vector<ll> multiply_mod(const vector<ll>& a, const vector<ll>& b, ll m) {
		if (a.empty() || b.empty()) {
			return {};
		}
		ll need = (ll) a.size() + (ll) b.size() - 1;
		ll nbase = 0;
		while ((1 << nbase) < need) {
			nbase++;
		}
		ensure_base(nbase);
		ll sz = 1 << nbase;
		if (sz > (ll) fa.size()) {
			fa.resize(sz);
		}
		for (ll i = 0; i < (ll) a.size(); i++) {
			ll x = (a[i] % m + m) % m;
			fa[i] = cmpl(x & ((1 << 15) - 1), x >> 15);
		}
		fill(fa.begin() + a.size(), fa.begin() + sz, cmpl{0, 0});
		fft(fa, sz);
		if (sz > (ll) fb.size()) {
			fb.resize(sz);
		}
		if (a == b) {
			copy(fa.begin(), fa.begin() + sz, fb.begin());
		} else {
			for (ll i = 0; i < (ll) b.size(); i++) {
				ll x = (b[i] % m + m) % m;
				fb[i] = cmpl(x & ((1 << 15) - 1), x >> 15);
			}
			fill(fb.begin() + b.size(), fb.begin() + sz, cmpl{0, 0});
			fft(fb, sz);
		}
		double ratio = 0.25 / sz;
		cmpl r2(0, -1);
		cmpl r3(ratio, 0);
		cmpl r4(0, -ratio);
		cmpl r5(0, 1);
		for (ll i = 0; i <= (sz >> 1); i++) {
			ll j = (sz - i) & (sz - 1);
			cmpl a1 = (fa[i] + fa[j].conjugated());
			cmpl a2 = (fa[i] - fa[j].conjugated()) * r2;
			cmpl b1 = (fb[i] + fb[j].conjugated()) * r3;
			cmpl b2 = (fb[i] - fb[j].conjugated()) * r4;
			if (i != j) {
				cmpl c1 = (fa[j] + fa[i].conjugated());
				cmpl c2 = (fa[j] - fa[i].conjugated()) * r2;
				cmpl d1 = (fb[j] + fb[i].conjugated()) * r3;
				cmpl d2 = (fb[j] - fb[i].conjugated()) * r4;
				fa[i] = c1 * d1 + c2 * d2 * r5;
				fb[i] = c1 * d2 + c2 * d1;
			}
			fa[j] = a1 * b1 + a2 * b2 * r5;
			fb[j] = a1 * b2 + a2 * b1;
		}
		fft(fa, sz);
		fft(fb, sz);
		vector<ll> res(need);
		for (ll i = 0; i < need; i++) {
			long long aa = llround(fa[i].x);
			long long bb = llround(fb[i].x);
			long long cc = llround(fa[i].y);
			res[i] = static_cast<ll>((aa + ((bb % m) << 15) + ((cc % m) << 30)) % m);
		}
		return res;
	}
}  // namespace fft
/*
   use these:
   vector<ll> multiply_mod(const vector<ll>& a, const vector<ll>& b, ll m)
   vector<ll> square(const vector<ll>& a)
   vector<ll> multiply(const vector<ll>& a, const vector<ll>& b) // (if a == b it uses square)
 */
endsnippet


snippet sufarr "suffix array"
const char C = 'a' - 1; // before first letter change
const char maxchar = 'z'; // change

vector<ll> suffarray(string s) { // without $ at the end
	vector<ll> p, c, pn, cn, cnt;
	ll n = (ll)s.size();
	c.assign(n, 0);
	for (ll i = 0; i < n; i++) {
		c[i] = s[i] - C;
	}
	for (ll j = 0; j <= (maxchar - C); j++) {
		for (ll i = 0; i < n; i++) {
			if (c[i] == j) {
				p.push_back(i);
			}
		}
	}
	ll maxc = c[p.back()];
	pn.resize(n);
	for (ll k = 0; (1 << k) <= 2 * n; k++) {
		for (ll i = 0; i < n; i++) {
			pn[i] = ((p[i] -  (1 << k)) % n + n) % n;
		}
		cnt.assign(maxc + 3, 0);
		for (ll i = 0; i < n; i++) {
			cnt[c[i] + 1]++;
		}
		for (ll i = 1; i <= maxc + 2; i++) {
			cnt[i] += cnt[i - 1];
		}
		for (ll i = 0; i < n; i++) {
			p[cnt[c[pn[i]]]++] = pn[i];
		}
		cn.assign(n, 0);
		cn[p[0]] = 1;
		for (ll i = 1; i < n; i++) {
			if (c[p[i]] == c[p[i - 1]] && c[(p[i] + (1 << k)) % n] == c[(p[i - 1] + (1 << k)) % n]) {
				cn[p[i]] = cn[p[i - 1]];
			} else {
				cn[p[i]] = cn[p[i - 1]] + 1;
			}
		}
		maxc = cn[p.back()];
		c = cn;
	}
	return p;
}

vector<ll> findlcp(string s, vector<ll> p) {
	vector<ll> lcp, mem;
	ll n = (ll)s.size();
	mem.resize(n);
	for (ll i = 0; i < n; i++) {
		mem[p[i]] = i;
	}
	lcp.assign(n, 0);
	for (ll i = 0; i < n; i++) {
		if (i > 0) {
			lcp[mem[i]] = max(lcp[mem[i - 1]] - 1, 0);
		}
		if (mem[i] == n - 1) {
			continue;
		}
		while (max(i, p[mem[i] + 1]) + lcp[mem[i]] < n && s[i + lcp[mem[i]]] == s[p[mem[i] + 1] + lcp[mem[i]]]) {
			lcp[mem[i]]++;
		}
	}
	return lcp;
}
endsnippet


snippet aho "aho-corasik"
struct aho {
	vector<vector<ll> > g, gr;
	vector<string> str;
	ll root;
	ll sz;
	vector<ll> ending;
	vector<ll> link;
	char firstlet;
	ll numlet = 0;

	aho():
		g(),
		gr(),
		str(),
		root(0),
		sz(0),
		ending(),
		link() {}

	aho(vector<string> q, char firlet = 'a') { // change
		firstlet = firlet;
		sz = q.size();
		str = q;
		g.clear();
		gr.clear();
		ending.clear();
		link.clear();
		root = 0;
		ending.assign(1, 0);
		numlet = 0;
		for (ll i = 0; i < q.size(); i++) {
			for (ll j = 0; j < q[i].size(); j++) {
				numlet = q[i][j] - firstlet;
			}
		}
		numlet++;
		g.push_back(vector<ll>(numlet, -1));
		for (ll i = 0; i < q.size(); i++) {
			ll v = root;
			for (ll j = 0; j < q[i].size(); j++) {
				if (g[v][q[i][j] - firstlet] == -1) {
					g[v][q[i][j] - firstlet] = g.size();
					g.push_back(vector<ll>(numlet, -1));
					ending.push_back(0);
				}
				v = g[v][q[i][j] - firstlet];
			}
			ending[v]++;
		}
		link.assign(g.size(), -1);
		link[root] = root;
		queue<ll> que;
		que.push(root);
		while (que.size()) {
			ll v = que.front();
			que.pop();
			for (ll i = 0; i < numlet; i++) {
				if (g[v][i] == -1) {
					if (v == root) {
						g[v][i] = v;
					} else {
						g[v][i] = g[link[v]][i];
					}
				}
				else {
					que.push(g[v][i]);
					if (v == root) {
						link[g[v][i]] = v;
					} else {
						link[g[v][i]] = g[link[v]][i];
					}
				}
			}
			gr.resize(g.size());
			for (ll i = 0; i < g.size(); i++) {
				if (i != root) {
					gr[link[i]].push_back(i);
				}
			}
			dfslink(root);
		}

		void dfslink(ll v) {
			for (ll u : gr[v]) {
				ending[u] += ending[v];
				dfslink(u);
			}
		}

		ll find(string s) { // change
			ll ans = 0;
			ll v = root;
			for (ll i = 0; i < s.size(); i++) {
				v = g[v][s[i] - firstlet];
				ans += ending[v];
			}
			return ans;
		}
};
endsnippet


snippet cht "convex hull trick"

		struct Line {
			ll k, b;
			Line():
				k(0),
				b(0) {}
			Line(ll k, ll b):
				k(k),
				b(b) {}

			ld operator()(ld x) {
				return x * (ld)k + (ld)b;
			}
		};

	const ll INF = 2e18; // change

	struct CHT {
		vector<Line> lines;
		bool mini; // cht on minimum

		ld f(Line l1, Line l2) {
			return (ld)(l1.b - l2.b) / (ld)(l2.k - l1.k);
		}

		void addLine(ll k, ll b) {
			if (!mini) {
				k = -k;
				b = -b;
			}
			Line l(k, b);
			while (lines.size() > 1) {
				if (lines.back().k == k) {
					if (lines.back().b > b) {
						lines.pop_back();
					} else {
						break;
					}
					continue;
				}
				ld x1 = f(lines.back(), l);
				ld x2 = f(lines.back(), lines[lines.size() - 2]);
				if (x1 > x2) {
					break;
				}
				lines.pop_back();
			}
			if (!lines.size() || lines.back().k != k) {
				lines.push_back(l);
			}
		}

		cHT(vector<pair<ll, ll> > v, bool ok = 1) { // change
			mini = ok;
			lines.clear();
			for (ll i = 0; i < v.size(); i++) {
				addLine(v[i].first, v[i].second);
			}
		}

		ll getmin(ll x) { //find of lleger!
			if (!lines.size()) {
				return (mini ? INF : -INF);
			}
			ll l = 0, r = lines.size();
			while (r - l > 1) {
				ll mid = (r + l) / 2;
				if (f(lines[mid], lines[mid - 1]) <= (ld)x) {
					l = mid;
				} else {
					r = mid;
				}
			}
			ll ans = lines[l].k * x + lines[l].b;
			return (mini ? ans : -ans);
		}
};
endsnippet
snippet hld
template<ll size, ll lg = 25, typename seg_t = long long>
struct hld {
	vector<ll> edges[size];
	ll bigchild[size];
	ll sz[size];
	ll depth[size];
	ll chain[size];
	ll label[size], label_time;
	ll par[size];

	ll lca_lift[size][lg];

	seg_t seg_tree[4 * size];
	seg_t seg_lazy[4 * size];

	ll N;

	/* ----------- segment tree ----------- */ 

	/* CHANGE THIS SECTION BY PROBLEM */
	inline seg_t seg_combine(seg_t a, seg_t b) {
		return a ^ b;
	}

	inline seg_t seg_lazy_apply(seg_t lazy_val, seg_t new_val) {
		return new_val;
	}

	inline seg_t seg_lazy_func(seg_t cur_val, seg_t lazy_val, ll l, ll r) {
		return lazy_val;
	}

	const seg_t seg_sentinel = 0;
	const seg_t seg_lazy_sentinel = -1;
	const seg_t seg_init_val = 0;
	/* END SECTION */

	seg_t seg_query_header(ll l, ll r) {
		return seg_query_rec(0, 0, N - 1, l, r);
	}

	seg_t seg_query_rec(ll i, ll tl, ll tr, ll ql, ll qr) {
		seg_eval_lazy(i, tl, tr);

		if (ql <= tl && tr <= qr) return seg_tree[i];
		if (tl > tr || tr < ql || qr < tl) return seg_sentinel;

		ll mid = (tl + tr) / 2;
		seg_t a = seg_query_rec(2 * i + 1, tl, mid, ql, qr);
		seg_t b = seg_query_rec(2 * i + 2, mid + 1, tr, ql, qr);
		return seg_combine(a, b);
	}

	void seg_update_header(ll l, ll r, seg_t v) {
		seg_update_rec(0, 0, N - 1, l, r, v);
	}

	seg_t seg_update_rec(ll i, ll tl, ll tr, ll ql, ll qr, seg_t v) {
		seg_eval_lazy(i, tl, tr);

		if (tl > tr || tr < ql || qr < tl) return seg_tree[i];
		if (ql <= tl && tr <= qr) {
			seg_lazy[i] = seg_lazy_apply(seg_lazy[i], v);
			seg_eval_lazy(i, tl, tr);
			return seg_tree[i];
		}
		if (tl == tr) return seg_tree[i];

		ll mid = (tl + tr) / 2;
		seg_t a = seg_update_rec(2 * i + 1, tl, mid, ql, qr, v);
		seg_t b = seg_update_rec(2 * i + 2, mid + 1, tr, ql, qr, v);
		return seg_tree[i] = seg_combine(a, b);
	}

	void seg_eval_lazy(ll i, ll l, ll r) {
		if (seg_lazy[i] == seg_lazy_sentinel) return;

		seg_tree[i] = seg_lazy_func(seg_tree[i], seg_lazy[i], l, r);

		if (l != r) {
			seg_lazy[i * 2 + 1] = seg_lazy_apply(seg_lazy[i * 2 + 1], seg_lazy[i]);
			seg_lazy[i * 2 + 2] = seg_lazy_apply(seg_lazy[i * 2 + 2], seg_lazy[i]);
		}

		seg_lazy[i] = seg_lazy_sentinel;
	}

	/* ----------- init phase 1 ----------- */
	/* initialize segtree, clear edges, etc. */

	void init_arrays(ll n) {
		// everything not initialized doesn't need to be
		N = n;
		for (ll i = 0; i < N; i++) {
			edges[i].clear();
			chain[i] = i;
		}

		for (ll i = 0; i < 4 * N; i++) {
			seg_tree[i] = seg_init_val;
			seg_lazy[i] = seg_lazy_sentinel;
		}
	}

	/* ----------- init phase 2 ----------- */
	/* put edges in */

	void add_edge(ll u, ll v) {
		edges[u].push_back(v);
		edges[v].push_back(u);
	}

	/* ----------- init phase 3 ----------- */
	/* build the lca and hld stuff */

	void init_tree(seg_t* arr, ll root = 0) {
		// lca
		lca_dfs(root, -1);

		// size, compute biggest children
		dfs_size(root, -1, 0);

		// compute chains
		dfs_chains(root, -1);

		// label nodes
		label_time = 0;
		dfs_labels(arr, root, -1);
	}

	void lca_dfs(ll v, ll par) {
		lca_lift[v][0] = par;

		for (ll i = 1; i < lg; i++) {
			if (lca_lift[v][i - 1] == -1) lca_lift[v][i] = -1;
			else lca_lift[v][i] = lca_lift[lca_lift[v][i - 1]][i - 1];
		}

		for (ll x: edges[v]) {
			if (x != par) {
				lca_dfs(x, v);
			}
		}
	}

	void dfs_size(ll v, ll p, ll d) {
		sz[v] = 1;
		depth[v] = d;
		par[v] = p;
		ll bigc = -1, bigv = -1;

		for (ll x: edges[v]) {
			if (x != p) {
				dfs_size(x, v, d + 1);
				sz[v] += sz[x];
				if (sz[x] > bigv) {
					bigc = x;
					bigv = sz[x];
				}
			}
		}

		bigchild[v] = bigc;
	}

	void dfs_chains(ll v, ll p) {
		if (bigchild[v] != -1) {
			chain[bigchild[v]] = chain[v];
		}

		for (ll x: edges[v]) {
			if (x != p) {
				dfs_chains(x, v);
			}
		}
	}

	void dfs_labels(seg_t* arr, ll v, ll p) {
		label[v] = label_time++;
		seg_update_header(label[v], label[v], arr[v]);

		if (bigchild[v] != -1) {
			dfs_labels(arr, bigchild[v], v);
		}

		for (ll x: edges[v]) {
			if (x != p && x != bigchild[v]) {
				dfs_labels(arr, x, v);
			}
		}
	}

	/* ----------- init phase 4 ----------- */
	/* usage */

	ll lca(ll a, ll b) {
		if (depth[a] < depth[b]) swap(a, b);
		ll d = depth[a] - depth[b];
		ll v = get_kth_ancestor(a, d);
		if (v == b) {
			return v;
		} else {
			for (ll i = lg - 1; i >= 0; i--) {
				if (lca_lift[v][i] != lca_lift[b][i]) {
					v = lca_lift[v][i];
					b = lca_lift[b][i];
				}
			}
			return lca_lift[b][0];
		}
	}

	ll get_kth_ancestor(ll v, ll k) {
		for (ll i = lg - 1; i >= 0; i--) {
			if (v == -1) return v;
			if ((1 << i) <= k) {
				v = lca_lift[v][i];
				k -= (1 << i);
			}
		}
		return v;
	}

	/* excludes p */
	seg_t query_chain(ll v, ll p) {
		seg_t val = seg_sentinel;
		while (depth[p] < depth[v]) {
			ll top = chain[v];
			if (depth[top] <= depth[p]) {
				ll diff = depth[v] - depth[p];
				top = get_kth_ancestor(v, diff - 1);
			}
			val = seg_combine(val, seg_query_header(label[top], label[v]));
			v = par[top];
		}
		return val;
	}

	seg_t query(ll u, ll v) {
		ll lc = lca(u, v);
		seg_t val = seg_combine(query_chain(u, lc), query_chain(v, lc));
		val = seg_combine(val, seg_query_header(label[lc], label[lc]));
		return val;
	}

	/* excludes p */
	void update_chain(ll v, ll p, seg_t val) {
		while (depth[p] < depth[v]) {
			ll top = chain[v];
			if (depth[top] <= depth[p]) {
				ll diff = depth[v] - depth[p];
				top = get_kth_ancestor(v, diff - 1);
			}
			seg_update_header(label[top], label[v], val);
			v = par[top];
		}
	}

	void update(ll u, ll v, seg_t val) {
		ll lc = lca(u, v);
		update_chain(u, lc, val); 
		update_chain(v, lc, val);
		seg_update_header(label[lc], label[lc], val);
	}
};
endsnippet
snippet segtree "segment tree"
template <typename num_t> 
struct segtree {
  ll n, depth;
  vector<num_t> tree, lazy;

  void init(ll s, long long* arr) {
    n = s;
    tree = vector<num_t>(4 * s, 0);
    lazy = vector<num_t>(4 * s, 0);
    init(0, 0, n - 1, arr);
  }

  num_t init(ll i, ll l, ll r, long long* arr) {
    if (l == r) return tree[i] = arr[l];

    ll mid = (l + r) / 2;
    num_t a = init(2 * i + 1, l, mid, arr),
          b = init(2 * i + 2, mid + 1, r, arr);
    return tree[i] = a.op(b);
  }

  void update(ll l, ll r, num_t v) {
	if (l > r) return;
    update(0, 0, n - 1, l, r, v);
  }

  num_t update(ll i, ll tl, ll tr, ll ql, ll qr, num_t v) {
    eval_lazy(i, tl, tr);
	
	if (tr < ql || qr < tl) return tree[i];
    if (ql <= tl && tr <= qr) {
      lazy[i] = lazy[i].val + v.val;
      eval_lazy(i, tl, tr);
      return tree[i];
    }
    
    ll mid = (tl + tr) / 2;
    num_t a = update(2 * i + 1, tl, mid, ql, qr, v),
          b = update(2 * i + 2, mid + 1, tr, ql, qr, v);
    return tree[i] = a.op(b);
  }

  num_t query(ll l, ll r) {
	if (l > r) return num_t::null_v;
    return query(0, 0, n-1, l, r);
  }

  num_t query(ll i, ll tl, ll tr, ll ql, ll qr) {
    eval_lazy(i, tl, tr);
    
    if (ql <= tl && tr <= qr) return tree[i];
    if (tr < ql || qr < tl) return num_t::null_v;

    ll mid = (tl + tr) / 2;
    num_t a = query(2 * i + 1, tl, mid, ql, qr),
          b = query(2 * i + 2, mid + 1, tr, ql, qr);
    return a.op(b);
  }

  void eval_lazy(ll i, ll l, ll r) {
    tree[i] = tree[i].lazy_op(lazy[i], (r - l + 1));
    if (l != r) {
      lazy[i * 2 + 1] = lazy[i].val + lazy[i * 2 + 1].val;
      lazy[i * 2 + 2] = lazy[i].val + lazy[i * 2 + 2].val;
    }

    lazy[i] = num_t();
  }
};
endsnippet
snippet sum
struct sum_t {
  long long val;
  static const long long null_v = 0;

  sum_t(): val(0) {}
  sum_t(long long v): val(v) {}

  sum_t op(sum_t& other) {
    return sum_t(val + other.val);
  }

  sum_t lazy_op(sum_t& v, ll size) {
    return sum_t(val + v.val * size);
  }
};
endsnippet
snippet max
struct max_t {
  long long val;
  static const long long null_v = -9223372036854775807LL;

  max_t(): val(0) {}
  max_t(long long v): val(v) {}

  max_t op(max_t& other) {
    return max_t(max(val, other.val));
  }

  max_t lazy_op(max_t& v, ll size) {
    return max_t(val + v.val);
  }
};
endsnippet
snippet min
struct min_t {
  long long val;
  static const long long null_v = 9223372036854775807LL;

  min_t(): val(0) {}
  min_t(long long v): val(v) {}

  min_t op(min_t& other) {
    return min_t(min(val, other.val));
  }
  
  min_t lazy_op(min_t& v, ll size) {
    return min_t(val + v.val);
  }
};
endsnippet
snippet convex_hull
const ll is_query = -(1LL<<62);
struct line {
    ll m, b;
    mutable function<const line*()> succ;
    bool operator<(const line& rhs) const {
        if (rhs.b != is_query) return m < rhs.m;
        const line* s = succ();
        if (!s) return 0;
        ll x = rhs.m;
        return b - s->b < (s->m - m) * x;
    }
};

struct dynamic_hull : public multiset<line> { // will mallain upper hull for maximum
    const ll inf = LLONG_MAX;
    bool bad(iterator y) {
        auto z = next(y);
        if (y == begin()) {
            if (z == end()) return 0;
            return y->m == z->m && y->b <= z->b;
        }
        auto x = prev(y);
        if (z == end()) return y->m == x->m && y->b <= x->b;

		/* compare two lines by slope, make sure denominator is not 0 */
        ll v1 = (x->b - y->b);
        if (y->m == x->m) v1 = x->b > y->b ? inf : -inf;
        else v1 /= (y->m - x->m);
        ll v2 = (y->b - z->b);
        if (z->m == y->m) v2 = y->b > z->b ? inf : -inf;
        else v2 /= (z->m - y->m);
        return v1 >= v2;
    }
    void insert_line(ll m, ll b) {
        auto y = insert({ m, b });
        y->succ = [=] { return next(y) == end() ? 0 : &*next(y); };
        if (bad(y)) { erase(y); return; }
        while (next(y) != end() && bad(next(y))) erase(next(y));
        while (y != begin() && bad(prev(y))) erase(prev(y));
    }
    ll eval(ll x) {
        auto l = *lower_bound((line) { x, is_query });
        return l.m * x + l.b;
    }
};
endsnippet

snippet centroid "centroid decomposition"
const ll MAXN = ;

vector<ll> g[MAXN], used, p, d;

ll cnt;

ll dfs(ll v, ll pr) {
	cnt++;
	d[v] = 1;
	for (ll u : g[v]) {
		if (!used[u] && u != pr) {
			d[v] += dfs(u, v);
		}
	}
	return d[v];
}

ll centroid(ll v) {
	cnt = 0;
	dfs(v, -1);
	ll pr = -1;
	while (true) {
		ll z = -1;
		for (ll u : g[v]) {
			if (!used[u] && u != pr && d[u] * 2 >= cnt) {
				z = u;
			}
		}
		if (z == -1) {
			break;
		}
		pr = v;
		v = z;
	}
	return v;
}

void go(ll v, ll pr) {
	v = centroid(v);
	p[v] = pr;
	used[v] = 1;

	for (ll u : g[v]) {
		if (!used[u]) {
			go(u, v);
		}
	}
}
endsnippet


snippet sparse "sparse table"
//SparseTable<ll> s(a,[&](ll i,ll j){return __gcd(i,j);});
template <typename T, class F = function<T(const T&, const T&)>>
class SparseTable {
 public:
  ll n;
  vector<vector<T>> mat;
  F func;

  SparseTable(const vector<T>& a, const F& f) : func(f) {
    n = static_cast<ll>(a.size());
    ll max_log = 32 - __builtin_clz(n);
    mat.resize(max_log);
    mat[0] = a;
    for (ll j = 1; j < max_log; j++) {
      mat[j].resize(n - (1 << j) + 1);
      for (ll i = 0; i <= n - (1 << j); i++) {
        mat[j][i] = func(mat[j - 1][i], mat[j - 1][i + (1 << (j - 1))]);
      }
    }
  }

  T get(ll from, ll to) const {
    assert(0 <= from && from <= to && to <= n - 1);
    ll lg = 32 - __builtin_clz(to - from + 1) - 1;
    return func(mat[lg][from], mat[lg][to - (1 << lg) + 1]);
  }
};
endsnippet



snippet decart "treap"
struct Node {
	ll x;
	ll y;
	ll sz;
	Node *left;
	Node *right;
	Node(ll x = 0):
		x(x),
		y((ll)rnd()),
		sz(1),
		left(NULL),
		right(NULL) {}
};

ll sz(Node *v) {
	return (v == NULL ? 0 : v->sz);
}

Node* upd(Node *v) {
	if (v != NULL) {
	v->sz = 1 + sz(v->left) + sz(v->right);
	}
	return v;
}

Node* merge(Node *l, Node *r) {
	if (l == NULL) {
		return r;
	}
	if (r == NULL) {
		return l;
	}
	if (l->y < r->y) {
		l = merge(l, r->left);
		r->left = l;
		r = upd(r);
		return r;
	}
	r = merge(l->right, r);
	l->right = r;
	l = upd(l);
		return l;
}

pair<Node*, Node*> keySplit(Node *v, ll key) { // l's keys <= key, r's keys > key
	if (v == NULL) {
		return {v, v};
	}
	if (v->x <= key) {
		auto a = keySplit(v->right, key);
		v->right = a.first;
		v = upd(v);
		return {v, a.second};
	}
	auto a = keySplit(v->left, key);
	v->left = a.second;
	v = upd(v);
	return {a.first, v};
}

pair<Node*, Node*> sizeSplit(Node *v, ll siz) { // l's size is siz
	if (!v) {
		return {v, v};
	}
	if (sz(v->left) >= siz) {
		auto a = sizeSplit(v->left, siz);
		v->left = a.second;
		v = upd(v);
		return {a.first, v};
	}
	auto a = sizeSplit(v->right, siz - sz(v->left) - 1);
	v->right = a.first;
	v = upd(v);
	return {v, a.second};
}

void gogo(Node *v) {
	if (v == NULL) {
		return;
	}
	gogo(v->left);
	cerr << v->x << endl;
	gogo(v->right);
}
endsnippet

snippet fenwick "Fenwick tree"
struct Fenwick {
    vector<ll> tree;
    ll n;
    
    Fenwick(ll n) : n(n) {
        tree.assign(n, 0);
    }
    
    void poll_add(ll pos, ll val) {
        for (; pos < n; pos |= (pos + 1)) {
            tree[pos] += val;
        }
    }
    
    ll find_sum(ll r) { // [0, r]
        ll ans = 0;
        for (; r >= 0; r = (r & (r + 1)) - 1) {
            ans += tree[r];
        }
        return ans;
    }
    
    ll find_sum(ll l, ll r) { // [l, r)
        return find_sum(r - 1) - find_sum(l - 1);
    }
};
endsnippet

snippet Fenwick2D "2D Fenwick tree"
struct Fenwick2D {
	vector<vector<ll>> tree;
	ll n, m;

	Fenwick2D(ll n, ll m) : n(n), m(m) {
		tree.assign(n, vector<ll>(m, 0));
	}

	void poll_add(ll posx, ll posy, ll val) {
		for (ll x = posx; x < n; x |= (x + 1)) {
			for (ll y = posy; y < m; y |= (y + 1)) {
				tree[x][y] += val;
			}
		}
	}

	ll find_sum(ll rx, ll ry) { // [0, rx] x [0, ry]
		ll ans = 0;
		for (ll x = rx; x >= 0; x = (x & (x + 1)) - 1) {
			for (ll y = ry; y >= 0; y = (y & (y + 1)) - 1) {
				ans += tree[x][y];
			}
		}
		return ans;
	}

	ll find_sum(ll lx, ll rx, ll ly, ll ry) { // [lx, rx) x [ly, ry)
		return find_sum(rx - 1, ry - 1) - find_sum(rx - 1, ly - 1) - find_sum(lx - 1, ry - 1) + find_sum(lx - 1, ly - 1);
	}
};
endsnippet

snippet { "block"
{
	$0
}
endsnippet


snippet deb "debug output"
#ifdef ONPC
void debug_prll(string s) {
	cerr << "\"" << s << "\"";
}

void debug_prll(const char* s) {
	debug_prll((string)s);
}

void debug_prll(bool val) {
	cerr << (val ? "true" : "false");
}

void debug_prll(ll val) {
	cerr << val;
}

void debug_prll(ll val) {
	cerr << val;
}

template<typename F, typename S>
void debug_prll(pair<F, S> val) {
	cerr << "(";
	debug_prll(val.first);
	cerr << ", ";
	debug_prll(val.second);
	cerr << ")";
}

void debug_prll(vector<bool> val) {
	cerr << "{";
	bool first = true;
	for (bool x : val) {
		if (!first) {
			cerr << ", ";
		} else {
			first = false;
		}
		debug_prll(x);
	}
	cerr << "}";
}

template<typename T>
void debug_prll(T val) {
	cerr << "{";
	bool first = true;
	for (const auto &x : val) {
	if (!first) {
			cerr << ", ";
		} else {
			first = false;
		}
		debug_prll(x);
	}
	cerr << "}";
}

void debug_prll_collection() {
	cerr << endl;
}

template<typename First, typename... Args>
void debug_prll_collection(First val, Args... args) {
	cerr << " ";
	debug_prll(val);
	debug_prll_collection(args...);
}

#define debug(...) cerr << "@@@ " << #__VA_ARGS__ << " ="; debug_prll_collection(__VA_ARGS__);

#else
#define debug(...)
#endif
endsnippet
